import React from "react";
import type { Meta } from "@storybook/react";
import { Slider } from "./Slider";
import { SemanticColor } from "../../lib/colors";
import { SliderDirection, SliderSizes } from "./constants";
declare const meta: Meta<typeof Slider>;
export default meta;
export declare const Primary: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, {
    color: SemanticColor;
    size?: SliderSizes | undefined;
    label?: string | undefined;
    isDisabled?: boolean | undefined;
    direction?: SliderDirection | undefined;
    name?: string | undefined;
    blackText?: boolean | undefined;
    showSteps?: boolean | undefined;
    step?: number | undefined;
    maxValue?: number | undefined;
    startContent?: React.ReactNode;
    endContent?: React.ReactNode;
    value: number;
    onChange: (value: number) => void;
}>;
export declare const Vertical: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, {
    color: SemanticColor;
    size?: SliderSizes | undefined;
    label?: string | undefined;
    isDisabled?: boolean | undefined;
    direction?: SliderDirection | undefined;
    name?: string | undefined;
    blackText?: boolean | undefined;
    showSteps?: boolean | undefined;
    step?: number | undefined;
    maxValue?: number | undefined;
    startContent?: React.ReactNode;
    endContent?: React.ReactNode;
    value: number;
    onChange: (value: number) => void;
}>;
export declare const WithLabels: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, {
    color: SemanticColor;
    size?: SliderSizes | undefined;
    label?: string | undefined;
    isDisabled?: boolean | undefined;
    direction?: SliderDirection | undefined;
    name?: string | undefined;
    blackText?: boolean | undefined;
    showSteps?: boolean | undefined;
    step?: number | undefined;
    maxValue?: number | undefined;
    startContent?: React.ReactNode;
    endContent?: React.ReactNode;
    value: number;
    onChange: (value: number) => void;
}>;
export declare const WithIcons: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, {
    color: SemanticColor;
    size?: SliderSizes | undefined;
    label?: string | undefined;
    isDisabled?: boolean | undefined;
    direction?: SliderDirection | undefined;
    name?: string | undefined;
    blackText?: boolean | undefined;
    showSteps?: boolean | undefined;
    step?: number | undefined;
    maxValue?: number | undefined;
    startContent?: React.ReactNode;
    endContent?: React.ReactNode;
    value: number;
    onChange: (value: number) => void;
}>;
export declare const WithSteps: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, {
    color: SemanticColor;
    size?: SliderSizes | undefined;
    label?: string | undefined;
    isDisabled?: boolean | undefined;
    direction?: SliderDirection | undefined;
    name?: string | undefined;
    blackText?: boolean | undefined;
    showSteps?: boolean | undefined;
    step?: number | undefined;
    maxValue?: number | undefined;
    startContent?: React.ReactNode;
    endContent?: React.ReactNode;
    value: number;
    onChange: (value: number) => void;
}>;
export declare const WithIconsSteps: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, {
    color: SemanticColor;
    size?: SliderSizes | undefined;
    label?: string | undefined;
    isDisabled?: boolean | undefined;
    direction?: SliderDirection | undefined;
    name?: string | undefined;
    blackText?: boolean | undefined;
    showSteps?: boolean | undefined;
    step?: number | undefined;
    maxValue?: number | undefined;
    startContent?: React.ReactNode;
    endContent?: React.ReactNode;
    value: number;
    onChange: (value: number) => void;
}>;
export declare const Disabled: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react").ReactRenderer, {
    color: SemanticColor;
    size?: SliderSizes | undefined;
    label?: string | undefined;
    isDisabled?: boolean | undefined;
    direction?: SliderDirection | undefined;
    name?: string | undefined;
    blackText?: boolean | undefined;
    showSteps?: boolean | undefined;
    step?: number | undefined;
    maxValue?: number | undefined;
    startContent?: React.ReactNode;
    endContent?: React.ReactNode;
    value: number;
    onChange: (value: number) => void;
}>;
